//
//  Common.mm
//  NoteBook
//
//  Created by wangsc on 10-9-16.
//  Copyright 2010 ND. All rights reserved.
//

#import "Common.h"
//#import "Constant.h"
#import "CommonDefine.h"
#import <AssetsLibrary/AssetsLibrary.h>
#import <Photos/Photos.h>

@implementation CommonFunc

+ (NSString *)createGUIDStr {
    CFUUIDRef theUUID = CFUUIDCreate(NULL);
    CFStringRef stringGUID = CFUUIDCreateString(NULL, theUUID);
    CFRelease(theUUID);
    return [(NSString *)stringGUID autorelease];
}

+ (NSString *)getNoteTypeName:(ENUM_NOTE_TYPE)noteType {
    switch (noteType) {
        case NOTE_PIC:
            return @"Picture";
            break;
        case NOTE_WEB:
            return @"Web page";
        case NOTE_CUST_DRAW:
            return @"Easy draw";
        case NOTE_CUST_WRITE:
            return @"Easy write";
        case NOTE_VIDEO:
            return @"Video";
        case NOTE_AUDIO:
            return @"音频";
        case NOTE_CATE:
            return @"Catalog";
        case NOTE_FLASH:
            return @"Flash";
        case NOTE_WORD:
            return @"WORD";
        case NOTE_EXCEL:
            return @"Excel";
        case NOTE_EXE:
            return @"EXE";
        case NOTE_TXT:
            return @"TXT";
        case NOTE_POWERPOINT:
            return @"PowerPoint";
        case NOTE_COMPRESS:
            return @"压缩文件";
        case NOTE_CHM:
            return @"CHM";
        case NOTE_VISIO:
            return @"Visio";
        default:
            return @"未知类型";
    }
}

+ (NSString *)getItemTypeExt:(ENUM_ITEM_TYPE)itemType {
    switch (itemType) {
        case NI_NOTEINFO:
            return @"html";
        case NI_HTML:
            return @"html"; // HTML文本 .htm .html
        case NI_TEXT:
            return @"txt"; // Text类型文本  txt
        case NI_PIC:
            return @"jpg"; // 图片类型  jpg
        case NI_FLASH:
            return @"swf"; // Flash文件 swf
        case NI_VIDEO:
            return @"wmv"; // 视频 wmv
        case NI_AUDIO:
            return @"wav"; // wav
        case NI_WORD:
            return @"doc"; // doc
        case NI_EXCEL:
            return @"xls"; // xls
        case NI_PDF:
            return @"pdf"; // pdf
        case NI_EXE:
            return @"exe"; // exe
        case NI_TXT:
            return @"txt"; //
        case NI_RTF:
            return @"rtf"; // RTF
        case NI_POWERPOINT:
            return @"ppt"; // ppt
        case NI_COMPRESS:
            return @"rar"; // rar
        case NI_CHM:
            return @"chm"; // chm
        case NI_VISIO:
            return @"vsd"; // vsd
        case NI_CSS:
            return @"css"; // 样式表 .css
        case NI_JS:
            return @"js"; // JavaScript .js
        case NI_UNKNOWN:
            return @"unk"; // 未知类型
        case NI_INKDATA:
            return @"jpg"; //随手画数据文件
        default:
            return @"htm";
    }
}

+ (NSString *)getStreamTypeByExt:(NSString *)strExt {
    if ([strExt isEqualToString:@"html"])
        return @"text/html";
    if ([strExt isEqualToString:@"htm"])
        return @"text/html";
    if ([strExt isEqualToString:@"jpg"])
        return @"image/jpeg";
    if ([strExt isEqualToString:@"gif"])
        return @"image/gif";
    if ([strExt isEqualToString:@"png"])
        return @"image/png";
    if ([strExt isEqualToString:@"wav"])
        return @"audio/x-wav";
    return @"application/octet-stream";
}

#pragma mark -
#pragma mark publicfunc
// 获取系统版本字符串
+ (NSString *)osVersionString {
    return [[UIDevice currentDevice] systemVersion];
}

//获取应用程序版本号
+ (NSString *)getAppVersion {
    NSBundle *bundle = [NSBundle bundleForClass:[self class]];
    
    NSString *appVersion = nil;
    NSString *marketingVersionNumber =
    [bundle objectForInfoDictionaryKey:@"CFBundleShortVersionString"];
    NSString *developmentVersionNumber =
    [bundle objectForInfoDictionaryKey:@"CFBundleVersion"];
    if (marketingVersionNumber && developmentVersionNumber) {
        if ([marketingVersionNumber isEqualToString:developmentVersionNumber]) {
            appVersion = marketingVersionNumber;
        } else {
            appVersion = [NSString stringWithFormat:@"%@.%@", marketingVersionNumber,
                          developmentVersionNumber];
        }
    } else {
        appVersion = (marketingVersionNumber ? marketingVersionNumber
                      : developmentVersionNumber);
    }
    
    return appVersion;
}

//获取开发版本号
+ (NSString *)getDevelopVersion {
    NSBundle *bundle = [NSBundle bundleForClass:[self class]];
    
    NSString *developmentVersionNumber =
    [bundle objectForInfoDictionaryKey:@"CFBundleVersion"];
    if (developmentVersionNumber && developmentVersionNumber.length > 0) {
        return developmentVersionNumber;
    }
    return @"0";
}

//获取应用名称
+ (NSString *)getAppName {
    NSDictionary *dicInfo = [[NSBundle mainBundle] infoDictionary];
    NSString *strAppName = [dicInfo objectForKey:@"CFBundleDisplayName"];
    return strAppName;
}

/*
 + (NSString *) platformString
 {
 size_t size;
 sysctlbyname("hw.machine", NULL, &size, NULL, 0);
 char *answer = (char *)malloc(size);
 sysctlbyname("hw.machine", answer, &size, NULL, 0);
 NSString *results = [NSString stringWithCString:answer
 encoding:NSUTF8StringEncoding];
 free(answer);
 return results;
 }
 + (NSString *)deviceUniqueIDString {
 
 int                    mib[6];
 size_t                len;
 char                *buf;
 unsigned char        *ptr;
 struct if_msghdr    *ifm;
 struct sockaddr_dl    *sdl;
 
 mib[0] = CTL_NET;
 mib[1] = AF_ROUTE;
 mib[2] = 0;
 mib[3] = AF_LINK;
 mib[4] = NET_RT_IFLIST;
 
 if ((mib[5] = if_nametoindex("en0")) == 0) {
 printf("Error: if_nametoindex error/n");
 return NULL;
 }
 
 if (sysctl(mib, 6, NULL, &len, NULL, 0) < 0) {
 printf("Error: sysctl, take 1/n");
 return NULL;
 }
 
 if ((buf = (char *)malloc(len)) == NULL) {
 printf("Could not allocate memory. error!/n");
 return NULL;
 }
 
 if (sysctl(mib, 6, buf, &len, NULL, 0) < 0) {
 printf("Error: sysctl, take 2");
 return NULL;
 }
 
 ifm = (struct if_msghdr *)buf;
 sdl = (struct sockaddr_dl *)(ifm + 1);
 ptr = (unsigned char *)LLADDR(sdl);
 // NSString *outstring = [NSString
 stringWithFormat:@"%02x:%02x:%02x:%02x:%02x:%02x", *ptr, *(ptr+1), *(ptr+2),
 *(ptr+3), *(ptr+4), *(ptr+5)];
 NSString *outstring = [NSString stringWithFormat:@"%02x%02x%02x%02x%02x%02x",
 *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
 free(buf);
 return [outstring uppercaseString];
 }
 */

+ (NSString *)getAppAddressWithAppCode:(NSString *)sAppCode {
    if (!sAppCode) {
        return nil;
    }
    NSString *s = [sAppCode uppercaseString];
    if ([s isEqualToString:LM_QQHK]) //亲情会客
    {
        return nil;
    } else if ([s isEqualToString:LM_PAJS]) //平安接送
    {
        return @"mobile.php?mod=space&ac=pajs";
    } else if ([s isEqualToString:LM_GRKJ]) //个人空间
    {
        return @"mobile.php?mod=space&ac=person_class";
    } else if ([s isEqualToString:LM_BJKJ]) //班级空间
    {
        return @"mobile.php?mod=space&ac=intoclass";
    } else if ([s isEqualToString:LM_CZDA]) //成长档案
    {
        return nil;
    }
    // else if( [s isEqualToString:@"YEZJZX"] ) //父母学堂
    //{
    //    return nil;
    //}
    else if ([s isEqualToString:LM_CZGS]) //成长故事
    {
        return @"mobile.php?mod=czgs&ac=list&jyex_mobile=1";
    } else if ([s isEqualToString:LM_FMXT]) //父母学堂
    {
        return @"mobile.php?mod=yezx&ac=list&jyex_mobile=1";
    } else if ([s isEqualToString:LM_PM]) //消息
    {
        return @"mobile.php?mod=pm&ac=viewlist";
    }
    return nil;
}

//资源图片
+ (NSString *)getResourceNameWithAppCode:(NSString *)appCode {
    NSString *s = [appCode uppercaseString];
    if ([s isEqualToString:LM_QQHK]) //亲情会客
    {
        return @"app_image_qqhk.png";
    } else if ([s isEqualToString:LM_PAJS]) //平安接送
    {
        return @"app_image_pajs.png";
    } else if ([s isEqualToString:LM_GRKJ]) //个人空间
    {
        return @"app_image_grkj.png";
    } else if ([s isEqualToString:LM_BJKJ]) //班级空间
    {
        return @"app_image_grkj.png";
    } else if ([s isEqualToString:LM_CZDA]) //成长档案
    {
        return @"app_image_czda.png";
    } else if ([s isEqualToString:LM_FMXT]) //父母学堂
    {
        return @"app_image_fmxt.png";
    } else if ([s isEqualToString:LM_YEZZB]) //育儿掌中宝
    {
        return @"app_image_fmxt.png";
    } else //默认
    {
        return @"app_image_qqhk.png";
    }
}

+ (int)getBtnTagWithCode:(NSString *)sCode {
    if (sCode) {
        if ([sCode isEqualToString:LM_QQHK]) //亲情会客
        {
            return 1004;
        } else if ([sCode isEqualToString:LM_PAJS]) //平安接送
        {
            return 1003;
        } else if ([sCode isEqualToString:LM_GRKJ]) //个人空间(学校空间)
        {
            return 1001;
        } else if ([sCode isEqualToString:LM_BJKJ]) //班级空间
        {
            return 1000;
        } else if ([sCode isEqualToString:LM_PM]) {
            return 1002;
        }
    }
    return -1;
}

+ (NSString *)getAppCodeWithBtnTag:(int)tag {
    if (tag == 1004)
        return LM_QQHK; //亲情会客
    else if (tag == 1003)
        return LM_PAJS; //平安接送
    else if (tag == 1001)
        return LM_GRKJ; //个人空间(学校空间)
    else if (tag == 1000)
        return LM_BJKJ; //班级空间
    else if (tag == 1002)
        return LM_PM;
    else
        return @"";
}

/// 时间处理
+ (NSString *)compareTime:(NSString *)time {
    NSDate *now = [NSDate date];
    
    NSDate *nowDate =
    [[NSDate alloc] initWithTimeIntervalSince1970:[time doubleValue]];
    NSDateFormatter *formattrt = [[NSDateFormatter alloc] init];
    [formattrt setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    NSString *string = [formattrt stringFromDate:nowDate];
    
    NSDateFormatter *df = [[NSDateFormatter alloc] init];
    
    [df setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    
    //    NSLocale *locale = [[NSLocalealloc]
    //    initWithLocaleIdentifier:@"en_US"];//本地化
    //
    //    [df setLocale:locale];
    
    NSDate *myDate = [df dateFromString:string];
    
    NSTimeInterval timeBetween = [now timeIntervalSinceDate:myDate];
    
    ///两分钟内发的
    if (timeBetween / 60 <= 2) {
        return [NSString stringWithFormat:@"刚刚"];
    }
    //一个小时内显示多少分钟
    if (timeBetween / 3600 <= 1) {
        return [NSString stringWithFormat:@"%.0f分钟前", timeBetween / 60];
    }
    //时间超过一个星期直接显示年月日
    if (timeBetween / 86400 > 7) {
        return [string substringToIndex:10];
    }
    //时间超过1天显示多少天
    if (timeBetween / 86400 > 1) {
        
        return [NSString stringWithFormat:@"%.0f天前", timeBetween / 86400];
    }
    /// 24小时内显示多少个小时
    if (timeBetween / 3600 <= 24) {
        return [NSString stringWithFormat:@"%.0f小时前", timeBetween / 3600];
    }
    
    return string;
}

+ (void)showAlertView:(NSString *)string {
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示"
                                                    message:string
                                                   delegate:nil
                                          cancelButtonTitle:@"确定"
                                          otherButtonTitles:nil, nil];
    [alert show];
}

#pragma mark - 获取公告栏目
+ (void)getAnnouncementType {
    if (!TheCurUser.member.uid) return;  NSDictionary *para = @{ @"uid" : TheCurUser.member.uid };
    [BBQHTTPRequest queryWithType:BBQHTTPRequestTypeGetAnnouncementType
                            param:para
        constructingBodyWithBlock:nil
                   successHandler:^(AFHTTPRequestOperation *operation,
                                    NSDictionary *responseObject, bool apiSuccess) {
                       
                       dispatch_async(dispatch_get_main_queue(), ^{
                           TheCurUser.announcementTypes = responseObject[@"data"][@"blogarr"];
                       });
                       
                   }
                     errorHandler:^(NSDictionary *responseObject) {
                         NSLog(@"%@", responseObject);
                     }
                   failureHandler:nil
                   successMessage:nil
                     errorMessage:nil];
}

#pragma mark - 扫描相册
+ (void)explorePhotoFromGroup:(ALAssetsGroup *)group {
    __block NSInteger i = 0;
    ALAssetsLibrary *assetsLibrary = [[ALAssetsLibrary alloc]init];
    __block NSTimeInterval lastTime = 0;
    NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
    if ([def doubleForKey:[NSString stringWithFormat:@"%@newPhoto",
                           TheCurUser.member.uid]]) {
        lastTime =
        [def doubleForKey:[NSString stringWithFormat:@"%@newPhoto",
                           TheCurUser.member.uid]];
    }
    
    [assetsLibrary
     enumerateGroupsWithTypes:
     group ? [[group valueForProperty:
               ALAssetsGroupPropertyType] unsignedIntegerValue]
     : ALAssetsGroupSavedPhotos
     usingBlock:^(ALAssetsGroup *group, BOOL *stop) {
         [group setAssetsFilter:[ALAssetsFilter allPhotos]];
         [group enumerateAssetsUsingBlock:^(ALAsset *result, NSUInteger index,
                                            BOOL *stop) {
             
             if (result) {
                 NSDate *photodate = [result valueForProperty:ALAssetPropertyDate];
                 NSTimeInterval longtime = [photodate timeIntervalSince1970];
                 
                 if (lastTime == 0) {
                     double theNewTime = longtime;
                     [def setDouble:theNewTime
                             forKey:[NSString stringWithFormat:@"%@newPhoto",
                                     TheCurUser.member.uid]];
                 } else if (longtime > lastTime) {
                     i++;
                     lastTime = longtime;
                     double newTime = longtime;
                     if (i >= 6) {
                         if (i == 6) {
                             [[NSNotificationCenter defaultCenter]
                              postNotificationName:kNewPhotoRemind
                              object:nil
                              userInfo:@{
                                         @"type" :
                                             @(BBQRefreshNotificationTypePhotoRemind)
                                         }];
                         }
                         [def setDouble:newTime
                                 forKey:[NSString stringWithFormat:@"%@newPhoto",
                                         TheCurUser.member.uid]];
                     }
                 }
             }
         }];
         
     }
     failureBlock:^(NSError *error) {
         NSLog(@"获取相册失败");
     }];
}

- (void)getPhotoTimeFromArray:(NSArray *)array {
    __block NSTimeInterval graphtime = 0;
    __block NSDate *date = [NSDate date];
    
    [array enumerateObjectsUsingBlock:^(id asset, NSUInteger idx, BOOL *stop) {
        NSDate *photodate = nil;
        if ([asset isKindOfClass:[ALAsset class]]) {
            photodate = [(ALAsset *)asset valueForProperty:ALAssetPropertyDate];
        } else if ([asset isKindOfClass:[PHAsset class]]) {
            photodate = [(PHAsset *)asset creationDate];
        }
        
        NSTimeInterval longtime = [photodate timeIntervalSince1970];
        if (graphtime < longtime) {
            graphtime = longtime;
            date = photodate;
        }
    }];
}

@end
