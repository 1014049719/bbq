//
//  MessageViewController.m
//  BBQ
//
//  Created by 朱琨 on 15/9/11.
//  Copyright © 2015年 bbq. All rights reserved.
//

#import "MessageViewController.h"
#import "MessagelTableViewCell.h"
#import "MessageItemModel.h"
#import "DetailViewController.h"
#import "UserDataShowViewController.h"
#import "WebViewController.h"
#import "GroupViewController.h"
#import "DetailViewController.h"
#import "BabyDailyReportViewController.h"
#import "RemindPhotoViewController.h"
#import "TeLeDouViewController.h"
#import "JifenDetailTableViewController.h"
#import "GiftViewController.h"
#import "GroupViewController.h"
#import "CardWebViewController.h"
#import "CardPageViewController.h"
#import "SVPullToRefresh.h"
#import <SSPullToRefresh.h>
#import <UITableView+FDTemplateLayoutCell.h>
#import <UINavigationBar+Awesome.h>
#import "LoadingView.h"
#import <DateTools.h>
#import "SendInvitationViewController.h"
#import <ReactiveCocoa.h>
#import "BBQDynamicTableViewController.h"
#import "BBQInviteManageViewController.h"
#import "BBQInviteAuditViewController.h"
#import "BBQLevelViewController.h"
#import "BBQAttentionViewController.h"
#import "QBImagePickerController.h"
#import "Dynamic.h"

@interface MessageViewController () <SSPullToRefreshViewDelegate,
UITableViewDataSource, UITableViewDelegate>
@property(weak, nonatomic) IBOutlet UITableView *tableView;
/// 数据源
@property(strong, nonatomic) NSMutableArray *dataAry;
/// 网络请求参数 type
@property(assign, nonatomic) int sType;
/// 网络请求参数 dateline
@property(copy, nonatomic) NSString *sDateLine;
/// 记录网络请求返回数据的最后一条dateLine
@property(copy, nonatomic) NSString *sEndDateLine;
/// 记录网络请求返回数据的第一条dateLine
@property(copy, nonatomic) NSString *sStartDateLine;
//定时器
@property(strong, nonatomic) NSTimer *timer;

//下拉上拉刷新
@property(strong, nonatomic) SSPullToRefreshView *pullToRefreshView;
@property(assign, nonatomic) BOOL isRefreshing;
//新消息数
@property(assign, nonatomic) int newnum;
//上次更新时间点
@property(copy, nonatomic) NSString *updateline;

@property(strong, nonatomic) LoadingView *loadingView;
@end

@implementation MessageViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
//    RAC(self, tabBarItem.badgeValue) = [RACSignal combineLatest:[UnReadManager shareManager], messages),
//                                        RACObserve([UnReadManager shareManager], notifications)] reduce:^id{
//        
//    }];
    
    self.edgesForExtendedLayout=UIRectEdgeNone;
    self.automaticallyAdjustsScrollViewInsets=NO;
    
    self.loadingView =
    [[NSBundle mainBundle] loadNibNamed:@"LoadingView" owner:self options:nil]
    .firstObject;
    [self.view insertSubview:self.loadingView aboveSubview:self.tableView];
    [self.view bringSubviewToFront:self.loadingView];
    WS(weakSelf)
    self.loadingView.buttonBlock = ^{
        [weakSelf refreshDataWithType:BBQRefreshTypePullDown];
    };
    
    //去掉Tableview多余分割线
    self.tableView.tableFooterView = [[UIView alloc] init];
    
    //取上次更新时间点（账号相关）
    NSString *key =
    [TheCurUser.member.username stringByAppendingString:@"msg_updateline"];
    self.updateline = [[NSUserDefaults standardUserDefaults] objectForKey:key];
    if (!self.updateline) {
        NSTimeInterval dateline = [[NSDate date] timeIntervalSince1970];
        self.sDateLine = [NSString stringWithFormat:@"%ld", (long)dateline];
        // self.updateline = @"0";
    }
    
    [self initValues];
    [self refreshDataWithType:BBQRefreshTypePullDown];
    
    //上拉回调
    [self.tableView addInfiniteScrollingWithActionHandler:^{
        [weakSelf refreshDataWithType:BBQRefreshTypePullUp];
    }];
    
    //_timer = [NSTimer scheduledTimerWithTimeInterval:5.0 target:self
    //selector:@selector(getNewDynamics) userInfo:nil repeats:YES];
    
    [[NSNotificationCenter defaultCenter]
     addObserver:self
     selector:@selector(willLogoutNotification:)
     name:kWillLogoutNotification
     object:nil];
}

- (void)willLogoutNotification:(NSNotification *)noti {
    [self.dataAry removeAllObjects];
    [self.tableView reloadData];
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    [_timer setFireDate:[NSDate distantFuture]];
}

- (void)viewWillAppear:(BOOL)animated {
    [self.tableView
     deselectRowAtIndexPath:[self.tableView indexPathForSelectedRow]
     animated:YES];
    [super viewWillAppear:animated];
    if (![self.sDateLine isEqualToString:@"0"]) {
        [_timer setFireDate:[NSDate distantPast]];
    }
    
    if ([[NSUserDefaults standardUserDefaults]
         boolForKey:@"messageNeedRefresh"] == YES) {
        //        if (!self.loadingView.isShowing) {
        //            [self.view insertSubview:self.loadingView
        //            aboveSubview:self.tableView];
        //            [self.view bringSubviewToFront:self.loadingView];
        //        }
        //        self.loadingView.status = BBQLoadingViewStatusLoading;
        //取上次更新时间点（账号相关）
        NSString *key =
        [TheCurUser.member.username stringByAppendingString:@"msg_updateline"];
        self.updateline = [[NSUserDefaults standardUserDefaults] objectForKey:key];
        if (!self.updateline) {
            NSTimeInterval dateline = [[NSDate date] timeIntervalSince1970];
            self.sDateLine = [NSString stringWithFormat:@"%ld", (long)dateline];
        }
        
        [self refreshDataWithType:BBQRefreshTypePullDown];
        [[NSUserDefaults standardUserDefaults] setBool:NO
                                                forKey:@"messageNeedRefresh"];
    }
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    //清消息红点
    NSDictionary *dic = @{ @"num" : [NSNumber numberWithInt:0] };
    [[NSNotificationCenter defaultCenter]
     postNotificationName:kSetUpdateNewMsgNotification
     object:nil
     userInfo:dic];
}

- (void)viewDidLayoutSubviews {
    if (!self.pullToRefreshView) {
        self.pullToRefreshView =
        [[SSPullToRefreshView alloc] initWithScrollView:self.tableView
                                               delegate:self];
    }
}

- (void)viewDidUnload {
    [super viewDidUnload];
    self.pullToRefreshView = nil;
}

#pragma mark -
#pragma mark 初始化变量
/// 初始化变量
- (void)initValues {
    
    if (nil == self.dataAry) {
        self.dataAry = [NSMutableArray arrayWithCapacity:0];
    }
    
    // 第一次网络请求的时候 type = 0 , dateline = 0
    self.sType = 0;
    self.sDateLine = @"0";
}

#pragma mark -
#pragma mark Table view data source

- (NSInteger)tableView:(UITableView *)tableView
 numberOfRowsInSection:(NSInteger)section {
    
    return self.dataAry.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    MessagelTableViewCell *cell =
    [tableView dequeueReusableCellWithIdentifier:@"messageCellidentifier"
                                    forIndexPath:indexPath];
    if (nil == cell) {
        cell =
        [[MessagelTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault
                                     reuseIdentifier:@"messageCellidentifier"];
    }
    MessageItemModel *model = [self.dataAry objectAtIndex:indexPath.row];
    cell.nameLabel.text = model.nickname;
    cell.contentLabel.text = model.content;
    
    NSString *heatUrlStr = model.avatar;
    NSString *tagStr = @"uid=1&";
    NSRange foundRange =
    [heatUrlStr rangeOfString:tagStr options:NSCaseInsensitiveSearch];
    if (foundRange.length > 0) {
        
        [cell.headerButton setBackgroundImage:[UIImage imageNamed:@"Lvtx@2x"]
                                     forState:UIControlStateNormal];
    } else {
        [cell.headerButton setBackgroundImageWithURL:[NSURL URLWithString:model.avatar] forState:UIControlStateNormal placeholder:Placeholder_avatar options:YYWebImageOptionSetImageWithFadeAnimation completion:nil];
    }
    cell.dateLineLabel.text = [NSDate timeAgoSinceDate:[NSDate dateWithTimeIntervalSince1970:[model.dateLine doubleValue]]];
    
    if (model.imgUrl && ![model.imgUrl isEqualToString:@""]) {
        cell.imageViewWidthCons.constant = 75.0;
        cell.imageViewLeadingCons.constant = 10.0;
        [cell.dynaPic setImageWithURL:[NSURL URLWithString:model.imgUrl] placeholder:[UIImage imageNamed:@"placeholder_white_loading"] options:YYWebImageOptionSetImageWithFadeAnimation completion:^(UIImage *image, NSURL *url, YYWebImageFromType from, YYWebImageStage stage, NSError *error) {
            if (error) {
                cell.dynaPic.image =
                [UIImage imageNamed:@"placeholder_white_error"];
            }
        }];
    } else {
        cell.imageViewLeadingCons.constant = 0;
        cell.imageViewWidthCons.constant = 0;
    }
    
    if ([model.srcuid intValue] != 0) {
        cell.headerButton.tag = [model.srcuid intValue];
    }
    
    if (!(model.omode == 2 && [model.nType isEqualToString:@"video"])) {
        cell.videoPalyImgView.hidden = YES;
    } else {
        cell.videoPalyImgView.hidden = NO;
    }
    
    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView
heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return [tableView
            fd_heightForCellWithIdentifier:@"messageCellidentifier"
            cacheByIndexPath:indexPath
            configuration:^(MessagelTableViewCell *cell) {
                MessageItemModel *model =
                [self.dataAry objectAtIndex:indexPath.row];
                cell.nameLabel.text = model.nickname;
                cell.contentLabel.text = model.content;
                cell.dateLineLabel.text = [NSDate timeAgoSinceDate:[NSDate dateWithTimeIntervalSince1970:[model.dateLine doubleValue]]];
                
                if (model.imgUrl &&
                    ![model.imgUrl isEqualToString:@""]) {
                    cell.imageViewWidthCons.constant = 75.0;
                    cell.imageViewLeadingCons.constant = 10.0;
                } else {
                    cell.imageViewLeadingCons.constant = 0;
                    cell.imageViewWidthCons.constant = 0;
                }
            }];
}

#pragma mark - Table View Delegate

- (void)tableView:(UITableView *)tableView
didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    /**
     op 和omode 处理方式 (用于指示APP做相应的处理，关联url中包含对应的处理
     1：打开URL页面 (url域内是url)
     2:打开动态详情页面(url域内是动态guid)
     3:不用处理
     4:打开亲友团页面(没用到url)
     5:跳转我[我的]TAB (没用到url)
     6.跳转到每日报告录入(url内是早餐、中餐、学习等8项内容) (后台推送任务生成)
     7.跳转到拍照提醒(没用到url)                            (后台推送任务生成)
     8.跳转到我的积分明细页面(没用到url)
     9.跳转到我的乐豆明细页面(没用到url)
     */
    
    //反选
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    MessageItemModel *model = [self.dataAry objectAtIndex:indexPath.row];
    
    [MessageViewController MessageAction:model.omode
                                     url:model.url
                          viewcontroller:self.navigationController];
}

+ (void)MessageAction:(int)omode
                  url:(NSString *)url
       viewcontroller:(UINavigationController *)controler {
    if (omode == 1) {
        if (url) {
            UIStoryboard *sb =
            [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
            WebViewController *vc =
            [sb instantiateViewControllerWithIdentifier:@"WebViewController"];
            if ([url hasPrefix:@"http://"])
                vc.url = url;
            else
                vc.url = [CS_URL_BASE stringByAppendingString:url];
            
            vc.bFirstInfo = YES;
            [vc setHidesBottomBarWhenPushed:YES];
            [controler pushViewController:vc animated:YES];
            ;
        }
    } else if (omode == 2) {
        if (url) {
            UIStoryboard *sb =
            [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
            DetailViewController *vc =
            [sb instantiateViewControllerWithIdentifier:@"DetailViewVC"];
            vc.guid = url;
            [vc setHidesBottomBarWhenPushed:YES];
            [controler pushViewController:vc animated:YES];
        } else
            NSLog(@"动态guid为空");
    } else if (omode == 3) {
    } else if (omode == 4) {
        UIStoryboard *sb =
        [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
        GroupViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"GroupVC"];
        NSDictionary *dic = [url jsonValueDecoded];
        vc.guid = [dic[@"baobaouid"] stringValue];
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 5) {
        UITabBarController *tabbar = (UITabBarController *)kKeyWindow.rootViewController;
        tabbar.selectedViewController = [tabbar.viewControllers lastObject];
//        UIStoryboard *RootStoryboard =
//        [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
//        UIViewController *mineVcl =
//        [RootStoryboard instantiateViewControllerWithIdentifier:@"mineVcl"];
//        
//        [controler pushViewController:mineVcl animated:YES];
    } else if (omode == 6) {
        int flag = 0;
        if ([url isEqualToString:@"早餐"]) {
            flag = 0;
        } else if ([url isEqualToString:@"午餐"]) {
            flag = 1;
        } else if ([url isEqualToString:@"午睡"]) {
            flag = 2;
        } else if ([url isEqualToString:@"喝水"]) {
            flag = 3;
        } else if ([url isEqualToString:@"学习"]) {
            flag = 4;
        } else if ([url isEqualToString:@"情绪"]) {
            flag = 5;
        } else if ([url isEqualToString:@"健康"]) {
            flag = 6;
        } else if ([url isEqualToString:@"寄语"]) {
            flag = 7;
        }
        NSString *path;
        
        NSString *strDate = [CommonFunc getCurrentDate];
        strDate =
        [strDate stringByReplacingOccurrencesOfString:@"-" withString:@""];
        
        BBQClassDataModel *model = TheCurUser.classdata.firstObject;
        
        if (flag == 0)
            path = [NSString stringWithFormat:URL_ZAOCAN, model.classid, strDate];
        else if (flag == 1)
            path = [NSString stringWithFormat:URL_ZHONGCAN, model.classid, strDate];
        else if (flag == 2)
            path = [NSString stringWithFormat:URL_WUSHUI, model.classid, strDate];
        else if (flag == 3)
            path = [NSString stringWithFormat:URL_HESHUI, model.classid, strDate];
        else if (flag == 4)
            path = [NSString stringWithFormat:URL_XUEXI, model.classid, strDate];
        else if (flag == 5)
            path = [NSString stringWithFormat:URL_QINGXU, model.classid, strDate];
        else if (flag == 6)
            path = [NSString stringWithFormat:URL_JIANGKANG, model.classid, strDate];
        else if (flag == 7)
            path = [NSString stringWithFormat:URL_SHUOMING, model.classid, strDate];
        
        UIStoryboard *sb =
        [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
        WebViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"WebViewController"];
        vc.url = path;
        vc.bFirstInfo = YES;
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
        
    } else if (omode == 7) { //拍照提醒
        UIStoryboard *sb = [UIStoryboard storyboardWithName:@"Teacher" bundle:nil];
        RemindPhotoViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"RemindPhotoVc"];
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 8) { //积分明细
        UIStoryboard *sb = [UIStoryboard storyboardWithName:@"Teacher" bundle:nil];
        JifenDetailTableViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"JifenDetailVc"];
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 9) { //乐豆明细
        UIStoryboard *sb = [UIStoryboard storyboardWithName:@"Teacher" bundle:nil];
        TeLeDouViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"TeLeDouVcl"];
        [vc setHidesBottomBarWhenPushed:YES];
        // vc.bbq_ld_num = _model.bbq_ld_num;
        [controler pushViewController:vc animated:YES];
    } else if (omode == 10) {
        if (!url) {
            return;
        }
        NSDictionary *dic = [url jsonValueDecoded];
        if (!dic || ![dic isKindOfClass:[NSDictionary class]]) {
            return;
        }
        NSString *baobaouid = dic[@"uid"];
        NSString *strDate = dic[@"d"];
        
        UIStoryboard *sb = [UIStoryboard storyboardWithName:@"Common" bundle:nil];
        BabyDailyReportViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"BabyDailyReportVc"];
        vc.bIsMessage = YES;
        vc.baobaouid = baobaouid;
        vc.strDate = strDate;
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 12) {
        UIStoryboard *sb =
        [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
        GiftViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"GiftViewController"];
        if (url) {
            vc.guid = url;
        } else {
            vc.guid = TheCurBaoBao.uid.stringValue;
        }
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 13) {
        UIStoryboard *sb =
        [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
        GroupViewController *vc =
        [sb instantiateViewControllerWithIdentifier:@"GroupVC"];
        if (url) {
            vc.guid = url;
        }
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 14) {
        if (!url) {
            return;
        }
        NSDictionary *dic = [url jsonValueDecoded];
        if (!dic || ![dic isKindOfClass:[NSDictionary class]]) {
            return;
        }
        BBQDynamicViewModel *viewModel = [[BBQDynamicViewModel alloc] initWithGroupType:[dic[@"dtype"] integerValue] baobaouid:[NSNumber numberWithString:dic[@"baobaouid"]] classuid:[NSNumber numberWithString:dic[@"classuid"]] schoolid:[NSNumber numberWithString:dic[@"schoolid"]]];
        BBQDynamicTableViewController *vc = [[BBQDynamicTableViewController alloc] initWithViewModel:viewModel];
        [TheCurUser.classdata enumerateObjectsUsingBlock:^(BBQClassDataModel *obj, NSUInteger idx, BOOL * _Nonnull stop) {
            if ([[obj.classid stringValue] isEqualToString:dic[@"classuid"]]) {
                vc.title = obj.classname;
                *stop = YES;
            }
        }];
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
        [BBQLoginManager autoLogin];
    } else if (omode == 15) {
        CardWebViewController *vc = [CardWebViewController new];
        if (url) {
            vc.baobaouid = url;
        }
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 16) {
        CardPageViewController *vc = [[UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil]
                                      instantiateViewControllerWithIdentifier:@"CardPageVcl"];
        ;
        if (url) {
            vc.baobaouid = url;
        }
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 18) {
        SendInvitationViewController *vc = [[UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil]
                                            instantiateViewControllerWithIdentifier:@"sendInvitationVC"];
        [vc setHidesBottomBarWhenPushed:YES];
        [controler pushViewController:vc animated:YES];
    } else if (omode == 19) {
        BBQInviteManageViewController *vc = [[UIStoryboard storyboardWithName:@"Teacher" bundle:nil]
                                            instantiateViewControllerWithIdentifier:@"inviteMangeViewContoller"];
        [vc setHidesBottomBarWhenPushed:YES];
        vc.title = @"邀请管理";
        [controler pushViewController:vc animated:YES];
    } else if (omode == 21) {
        BBQLevelViewController *levelVC = [[BBQLevelViewController alloc] init];
        levelVC.title = @"我的等级";
        levelVC.hidesBottomBarWhenPushed = YES;
        [controler pushViewController:levelVC animated:YES];
    } else if (omode == 22) {
        UIStoryboard *sb = [UIStoryboard storyboardWithName:@"RootTabBar" bundle:nil];
        BBQAttentionViewController *vc = [sb instantiateViewControllerWithIdentifier:@"AttentionListBoard"];
        vc.type = BBQAttentionViewTypeNormal;
        [controler pushViewController:vc animated:YES];
    } else if (omode == 23) {
        
        if (url && url.length > 0) {
            for (BBQBabyModel *baby in TheCurUser.baobaodata) {
                if ([url isEqualToString:[baby.uid stringValue]]) {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypePhoto object:baby]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                }
            }
        } else {
            for (BBQBabyModel *baby in TheCurUser.baobaodata) {
                if (baby.qx.integerValue == 1) {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypePhoto object:baby]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                } else {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypePhoto object:TheCurBaoBao]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                }
            }
        }
    } else if (omode == 24) {
        if (url && url.length > 0) {
            for (BBQBabyModel *baby in TheCurUser.baobaodata) {
                if ([url isEqualToString:[baby.uid stringValue]]) {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypePhoto object:baby]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                }
            }
        } else {
            for (BBQBabyModel *baby in TheCurUser.baobaodata) {
                if (baby.qx.integerValue == 1) {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypeVideo object:baby]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                } else {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypeVideo object:TheCurBaoBao]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                }
            }
        }
    } else if (omode == 25) {
        if (url && url.length > 0) {
            for (BBQBabyModel *baby in TheCurUser.baobaodata) {
                if ([url isEqualToString:[baby.uid stringValue]]) {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypePhoto object:baby]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                }
            }
        } else {
            for (BBQBabyModel *baby in TheCurUser.baobaodata) {
                if (baby.qx.integerValue == 1) {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypeBatch object:baby]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                } else {
                    QBImagePickerController *imgPicker = [[QBImagePickerController alloc] initWithDynamic:[Dynamic dynamicWithMediaType:BBQDynamicMediaTypeBatch object:TheCurBaoBao]];
                    [imgPicker hidesBottomBarWhenPushed];
                    [controler pushViewController:imgPicker animated:YES];
                    return;
                }
            }
        }
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Pull To Refresh
- (BOOL)pullToRefreshViewShouldStartLoading:(SSPullToRefreshView *)view {
    return !self.isRefreshing;
}

- (void)pullToRefreshView:(SSPullToRefreshView *)view
     didTransitionToState:(SSPullToRefreshViewState)toState
                fromState:(SSPullToRefreshViewState)fromState
                 animated:(BOOL)animated {
    if (fromState == SSPullToRefreshViewStateReady &&
        toState == SSPullToRefreshViewStateLoading) {
        self.isRefreshing = YES;
    } else if (fromState == SSPullToRefreshViewStateLoading &&
               toState == SSPullToRefreshViewStateClosing) {
        self.isRefreshing = NO;
    }
}

- (void)pullToRefreshViewDidStartLoading:(SSPullToRefreshView *)view {
    [self refreshDataWithType:BBQRefreshTypePullDown];
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    if ([segue.identifier isEqualToString:@"MessageToDetailSegue"]) {
        DetailViewController *dvc = segue.destinationViewController;
        dvc.guid = sender;
    }
    
    else if ([segue.identifier isEqualToString:@"jumpToUserData"]) {
        UserDataShowViewController *user = segue.destinationViewController;
        user.uid = sender;
    }
}

/// 头像点击
- (IBAction)headerIconEvent:(UIButton *)btn {
//    NSNumber *uid = @(btn.tag);
//    [self performSegueWithIdentifier:@"jumpToUserData" sender:uid];
}

- (void)refreshDataWithType:(BBQRefreshType)type {
    if (self.isRefreshing) {
        return;
    }
    
    if (!self.sStartDateLine) {
        self.sType = 0; //最新10条
        if (self.updateline)
            self.sDateLine = self.updateline; //取新消息数
        else {
            NSTimeInterval dateline = [[NSDate date] timeIntervalSince1970];
            self.sDateLine = [NSString stringWithFormat:@"%ld", (long)dateline];
        }
    } else {
        if (type == BBQRefreshTypePullUp) {
            self.sType = 2; //小于时间点10条
            self.sDateLine = self.sEndDateLine;
        } else {
            self.sType = 1; //大于时间点10条
            self.sDateLine = self.sStartDateLine;
        }
    }
    
    NSDictionary *params = @{
                             @"type" : @(self.sType),
                             @"dateline" : self.sDateLine
                             };
    
    [BBQHTTPRequest queryWithType:BBQHTTPRequestTypeGetMessageList
                            param:params
                   successHandler:^(AFHTTPRequestOperation *operation,
                                    NSDictionary *responseObject, bool apiSuccess) {
                       NSArray *tempAry = responseObject[@"data"][@"arr"];
                       
                       //数据处理
                       if (tempAry && [tempAry isKindOfClass:[NSArray class]] &&
                           [tempAry count] > 0) {
                           // self.dynamicsNum = [NSNumber numberWithInteger:tempAry.count];
                           
                           NSMutableArray *arr = [NSMutableArray array];
                           for (NSDictionary *tempDic in tempAry) {
                               MessageItemModel *model =
                               [[MessageItemModel alloc] initWithDic:tempDic];
                               [arr addObject:model];
                           }
                           NSArray *deleary = [NSArray arrayWithArray:arr];
                           if (!self.dataAry.count == 0) {
                               for (MessageItemModel *model1 in deleary) {
                                   for (MessageItemModel *model2 in self.dataAry) {
                                       if ([model1.messageid isEqualToString:model2.messageid]) {
                                           [arr removeObject:model1];
                                       }
                                   }
                               }
                           }
                           
                           if (self.sType == 0 || self.sType == 1) {
                               NSIndexSet *indexes = [NSIndexSet
                                                      indexSetWithIndexesInRange:NSMakeRange(0, [arr count])];
                               [self.dataAry insertObjects:arr atIndexes:indexes];
                           } else {
                               [self.dataAry addObjectsFromArray:arr];
                           }
                           
                           self.sStartDateLine =
                           [[tempAry firstObject] objectForKey:@"dateline"];
                           self.sEndDateLine = [[tempAry lastObject] objectForKey:@"dateline"];
                       }
                       
                       //处理屏幕滚动
                       if (tempAry && [tempAry isKindOfClass:[NSArray class]] &&
                           [tempAry count] > 0) {
                           //            self.tableView.infiniteScrollingView.enabled = YES;
                       } else {
                           if (type == BBQRefreshTypePullUp) {
                               //                self.tableView.showsInfiniteScrolling = NO;
                           }
                       }
                       
                       //处理新消息数
                       int newnum = 0;
                       if (tempAry && [tempAry isKindOfClass:[NSArray class]] &&
                           [tempAry count] > 0) {
                           if (self.sType == 0)
                               newnum = [responseObject[@"data"][@"newnum"] intValue];
                           else if (self.sType == 1)
                               newnum = (int)[tempAry count];
                           if (newnum > 0) {
                               //发通知，更新红点
                               //                NSDictionary *dic = @{@"num":[NSNumber
                               //                numberWithInt:newnum]};
                               //                [[NSNotificationCenter defaultCenter]
                               //                postNotificationName:kSetUpdateNewMsgNotification
                               //                object:nil userInfo:dic];
                               
                               //保存时间点
                               NSString *key = [TheCurUser.member.username
                                                stringByAppendingString:@"msg_updateline"];
                               [[NSUserDefaults standardUserDefaults] setObject:self.sStartDateLine
                                                                         forKey:key];
                           }
                       }
                       
                       // 刷新tableView
                       if (tempAry && [tempAry isKindOfClass:[NSArray class]] &&
                           [tempAry count] > 0) {
                           dispatch_async(dispatch_get_main_queue(), ^{
                               [self.tableView reloadData];
                           });
                       }
                       
                       if (self.dataAry.count) {
                           [self.loadingView dismiss];
                       } else {
                           self.loadingView.status = BBQLoadingViewStatusNoContent;
                       }
                       
                       dispatch_async(dispatch_get_main_queue(), ^{
                           if (type == BBQRefreshTypePullUp) {
                               [self.tableView.infiniteScrollingView stopAnimating];
                           } else {
                               [self.pullToRefreshView finishLoading];
                           }
                       });
                   }
                     errorHandler:^(NSDictionary *responseObject) {
                         dispatch_async(dispatch_get_main_queue(), ^{
                             if (self.loadingView.isShowing) {
                                 self.loadingView.status = BBQLoadingViewStatusError;
                             }
                             if (type == BBQRefreshTypePullUp) {
                                 [self.tableView.infiniteScrollingView stopAnimating];
                             } else {
                                 [self.pullToRefreshView finishLoading];
                             }
                         });
                     }
                   failureHandler:^(AFHTTPRequestOperation *operation, NSError *error) {
                       if (self.loadingView.isShowing) {
                           self.loadingView.status = BBQLoadingViewStatusError;
                       }
                       if (type == BBQRefreshTypePullUp) {
                           //            [self.tableView finishInfiniteScroll];
                           [self.tableView.infiniteScrollingView stopAnimating];
                       } else {
                           [self.pullToRefreshView finishLoading];
                       }
                   }];
}

@end
