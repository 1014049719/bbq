////
////  NSObject+Common.m
////  BBQ
////
////  Created by 朱琨 on 15/10/28.
////  Copyright © 2015年 bbq. All rights reserved.
////
//
//#import "NSObject+Common.h"
//
//@implementation NSObject (Common)
//
//#pragma mark BaseURL
//+ (NSString *)baseURLStr {
//    NSString *baseURLStr;
//    baseURLStr = @"http://117.141.115.68:883/";
////    baseURLStr = @"http://www.jyex.cn/";
//
//    return baseURLStr;
//}
//
//#pragma mark NetError
//-(id)handleResponse:(id)responseJSON {
//    return [self handleResponse:responseJSON autoShowError:YES];
//}
//-(id)handleResponse:(id)responseJSON autoShowError:(BOOL)autoShowError {
//    NSError *error = nil;
//    //code为非0值时，表示有错
//    NSNumber *resultCode = [responseJSON valueForKeyPath:@"code"];
//
//    if (resultCode.intValue != 0) {
//        error = [NSError errorWithDomain:[NSObject baseURLStr]
//        code:resultCode.intValue userInfo:responseJSON];
//
////        if (resultCode.intValue == 1000 || resultCode.intValue == 3207)
///{//用户未登录
////            if ([Login isLogin]) {//已登录的状态要抹掉
////                [Login doLogout];
////                [((AppDelegate *)[UIApplication sharedApplication].delegate)
///setupLoginViewController];
////                kTipAlert(@"%@", [NSObject tipFromError:error]);
////            }
////        }else{
////            if (autoShowError) {
////                [NSObject showError:error];
////            }
////        }
//    }
//    return error;
//}
//
//+ (BOOL)saveResponseData:(NSDictionary *)data toPath:(NSString *)requestPath{
////    User *loginUser = [Login curLoginUser];
////    if (!loginUser) {
////        return NO;
////    }else{
////        requestPath = [NSString stringWithFormat:@"%@_%@",
///loginUser.global_key, requestPath];
////    }
////    if ([self createDirInCache:kPath_ResponseCache]) {
////        NSString *abslutePath = [NSString stringWithFormat:@"%@/%@.plist",
///[self pathInCacheDirectory:kPath_ResponseCache], [requestPath md5Str]];
////        return [data writeToFile:abslutePath atomically:YES];
////    }else{
////        return NO;
////    }
//}
//+ (id)loadResponseWithPath:(NSString
//*)requestPath{//返回一个NSDictionary类型的json数据
////    User *loginUser = [Login curLoginUser];
////    if (!loginUser) {
////        return nil;
////    }else{
////        requestPath = [NSString stringWithFormat:@"%@_%@",
///loginUser.global_key, requestPath];
////    }
////    NSString *abslutePath = [NSString stringWithFormat:@"%@/%@.plist", [self
///pathInCacheDirectory:kPath_ResponseCache], [requestPath md5Str]];
////    return [NSMutableDictionary dictionaryWithContentsOfFile:abslutePath];
//    return [NSObject new];
//}
//
//+ (BOOL)deleteResponseCacheForPath:(NSString *)requestPath{
////    User *loginUser = [Login curLoginUser];
////    if (!loginUser) {
////        return NO;
////    }else{
////        requestPath = [NSString stringWithFormat:@"%@_%@",
///loginUser.global_key, requestPath];
////    }
////    NSString *abslutePath = [NSString stringWithFormat:@"%@/%@.plist", [self
///pathInCacheDirectory:kPath_ResponseCache], [requestPath md5Str]];
////    NSFileManager *fileManager = [NSFileManager defaultManager];
////    if ([fileManager fileExistsAtPath:abslutePath]) {
////        return [fileManager removeItemAtPath:abslutePath error:nil];
////    }else{
////        return NO;
////    }
//    return YES;
//}
//
//+ (BOOL)deleteResponseCache {
//    return [self deleteCacheWithPath:kPath_ResponseCache];
//}
//
//+ (BOOL) deleteCacheWithPath:(NSString *)cachePath {
//    NSString *dirPath = [self pathInCacheDirectory:cachePath];
//    BOOL isDir = NO;
//    NSFileManager *fileManager = [NSFileManager defaultManager];
//    BOOL existed = [fileManager fileExistsAtPath:dirPath isDirectory:&isDir];
//    bool isDeleted = false;
//    if ( isDir == YES && existed == YES )
//    {
//        isDeleted = [fileManager removeItemAtPath:dirPath error:nil];
//    }
//    return isDeleted;
//}
//
//#pragma mark - File M
////获取fileName的完整地址
//+ (NSString *)pathInCacheDirectory:(NSString *)fileName {
//    NSArray *cachePaths =
//    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask,
//    YES);
//    NSString *cachePath = [cachePaths objectAtIndex:0];
//    return [cachePath stringByAppendingPathComponent:fileName];
//}
////创建缓存文件夹
//+ (BOOL)createDirInCache:(NSString *)dirName {
//    NSString *dirPath = [self pathInCacheDirectory:dirName];
//    BOOL isDir = NO;
//    NSFileManager *fileManager = [NSFileManager defaultManager];
//    BOOL existed = [fileManager fileExistsAtPath:dirPath isDirectory:&isDir];
//    BOOL isCreated = NO;
//    if ( !(isDir == YES && existed == YES) )
//    {
//        isCreated = [fileManager createDirectoryAtPath:dirPath
//        withIntermediateDirectories:YES attributes:nil error:nil];
//    }
//    if (existed) {
//        isCreated = YES;
//    }
//    return isCreated;
//}
//@end
