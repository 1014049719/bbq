//
//  DES.m
//  XF_BusinessCard
//
//  Created by MaYing on 15/5/14.
//  Copyright (c) 2015年 xiaofu. All rights reserved.
//

#import "DES.h"
#import "NSString+Encode.h"
#import <GTM_Base64.h>

static NSString *_key = @"@#$%lk*&";

static const char _base64EncodingTable[64] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
static const short _base64DecodingTable[256] = {
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -1, -1, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, 62, -2, -2, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60,
    61, -2, -2, -2, -2, -2, -2, -2, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,
    11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2,
    -2, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
    43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -2, -2, -2};

@implementation DES
//+ (NSString *)encryptWithText:(NSString *)sText key:(NSString *)key
//{
//    //kCCEncrypt 加密
//    return [self encrypt:sText encryptOrDecrypt:kCCEncrypt key:key];
//}
//
//+ (NSString *)decryptWithText:(NSString *)sText key:(NSString *)key
//{
//    //kCCDecrypt 解密
//    return [self encrypt:sText encryptOrDecrypt:kCCDecrypt key:key];
//}

+ (NSString *)encrypt:(NSString *)sText
     encryptOrDecrypt:(CCOperation)encryptOperation
                  key:(NSString *)key {
  const void *dataIn;
  size_t dataInLength;

  if (encryptOperation == kCCDecrypt) //传递过来的是decrypt 解码
  {
    //解码 base64
    NSData *decryptData = [GTM_Base64
        decodeData:
            [sText dataUsingEncoding:NSUTF8StringEncoding]]; //转成utf-8并decode
    dataInLength = [decryptData length];
    dataIn = [decryptData bytes];
  } else // encrypt
  {
    NSData *encryptData = [sText dataUsingEncoding:NSUTF8StringEncoding];
    dataInLength = [encryptData length];
    dataIn = (const void *)[encryptData bytes];
  }

  /*
   DES加密 ：用CCCrypt函数加密一下，然后用base64编码下，传过去
   DES解密
   ：把收到的数据根据base64，decode一下，然后再用CCCrypt函数解密，得到原本的数据
   */
  CCCryptorStatus ccStatus;
  uint8_t *dataOut =
      NULL; //可以理解位type/typedef
            //的缩写（有效的维护了代码，比如：一个人用int，一个人用long。最好用typedef来定义）
  size_t dataOutAvailable = 0; // size_t  是操作符sizeof返回的结果类型
  size_t dataOutMoved = 0;

  dataOutAvailable = (dataInLength + kCCBlockSizeDES) & ~(kCCBlockSizeDES - 1);
  dataOut = malloc(dataOutAvailable * sizeof(uint8_t));
  memset((void *)dataOut, 0x0,
         dataOutAvailable); //将已开辟内存空间buffer的首 1 个字节的值设为值 0

  const void *vkey = (const void *)[key UTF8String];
  //

  // CCCrypt函数 加密/解密
  ccStatus =
      CCCrypt(encryptOperation, //  加密/解密
              kCCAlgorithm3DES, //  加密根据哪个标准（des，3des，aes。。。。）
              kCCOptionPKCS7Padding |
                  kCCOptionECBMode, //  选项分组密码算法(des:对每块分组加一次密
                                    //  3DES：对每块分组加三个不同的密)
              vkey,            //密钥    加密和解密的密钥必须一致
              kCCKeySizeDES,   //   DES 密钥的大小（kCCKeySizeDES=8）
              NULL,            //  可选的初始矢量
              dataIn,          // 数据的存储单元
              dataInLength,    // 数据的大小
              (void *)dataOut, // 用于返回数据
              dataOutAvailable,
              &dataOutMoved);

  NSString *result = nil;

  if (encryptOperation == kCCDecrypt) // encryptOperation==1  解码
  {
    //得到解密出来的data数据，改变为utf-8的字符串
    result = [[NSString alloc]
        initWithData:[NSData dataWithBytes:(const void *)dataOut
                                    length:(NSUInteger)dataOutMoved]
            encoding:NSUTF8StringEncoding];
  } else // encryptOperation==0  （加密过程中，把加好密的数据转成base64的）
  {
    //编码 base64
    NSData *data = [NSData dataWithBytes:(const void *)dataOut
                                  length:(NSUInteger)dataOutMoved];
    result = [GTM_Base64 stringByEncodingData:data];
  }

  return result;
}

//+ (NSString *) md5:(NSString *)str
//
//{
//
//    const char *cStr = [str UTF8String];
//
//    unsigned char result[CC_MD5_DIGEST_LENGTH];
//
//    CC_MD5( cStr, strlen(cStr), result );
//
//    return [NSString
//
//            stringWithFormat: @"XXXXXXXXXXXXXXXX",
//
//            result[0], result[1],
//
//            result[2], result[3],
//
//            result[4], result[5],
//
//            result[6], result[7],
//
//            result[8], result[9],
//
//            result[10], result[11],
//
//            result[12], result[13],
//
//            result[14], result[15]
//
//            ];
//
//}
+ (NSString *)encryptStr:(NSString *)str {
  return [DES doCipher:str key:_key context:kCCEncrypt];
}
+ (NSString *)decryptStr:(NSString *)str {
  return [DES doCipher:str key:_key context:kCCDecrypt];
}
+ (NSString *)doCipher:(NSString *)sTextIn
                   key:(NSString *)sKey
               context:(CCOperation)encryptOrDecrypt {
  NSStringEncoding EnC = NSUTF8StringEncoding;

  NSMutableData *dTextIn;
  if (encryptOrDecrypt == kCCDecrypt) {
    dTextIn = [[DES decodeBase64WithString:sTextIn] mutableCopy];
  } else {
    dTextIn = [[sTextIn dataUsingEncoding:EnC] mutableCopy];
  }
  NSMutableData *dKey = [[sKey dataUsingEncoding:EnC] mutableCopy];
  [dKey setLength:kCCBlockSizeDES];
  uint8_t *bufferPtr1 = NULL;
  size_t bufferPtrSize1 = 0;
  size_t movedBytes1 = 0;
  // uint8_t iv[kCCBlockSizeDES];
  // memset((void *) iv, 0x0, (size_t) sizeof(iv));
  Byte iv[] = {0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF};
  bufferPtrSize1 = ([sTextIn length] + kCCKeySizeDES) & ~(kCCKeySizeDES - 1);
  bufferPtr1 = malloc(bufferPtrSize1 * sizeof(uint8_t));
  memset((void *)bufferPtr1, 0x00, bufferPtrSize1);
  CCCrypt(encryptOrDecrypt,      // CCOperation op
          kCCAlgorithmDES,       // CCAlgorithm alg
          kCCOptionPKCS7Padding, // CCOptions options
          [dKey bytes],          // const void *key
          [dKey length],         // size_t keyLength
          iv,                    // const void *iv
          [dTextIn bytes],       // const void *dataIn
          [dTextIn length],      // size_t dataInLength
          (void *)bufferPtr1,    // void *dataOut
          bufferPtrSize1,        // size_t dataOutAvailable
          &movedBytes1);         // size_t *dataOutMoved

  NSString *sResult;
  if (encryptOrDecrypt == kCCDecrypt) {
    sResult = [[NSString alloc]
        initWithData:[NSData dataWithBytes:bufferPtr1 length:movedBytes1]
            encoding:EnC];
  } else {
    NSData *dResult = [NSData dataWithBytes:bufferPtr1 length:movedBytes1];
    sResult = [DES encodeBase64WithData:dResult];
  }
  //    NSString *sssss = [sResult encodeString:NSUTF8StringEncoding];
  return [sResult encodeString:NSUTF8StringEncoding];
}

+ (NSString *)encodeBase64WithString:(NSString *)strData {
  return [DES
      encodeBase64WithData:[strData dataUsingEncoding:NSUTF8StringEncoding]];
}

+ (NSString *)encodeBase64WithData:(NSData *)objData {
  const unsigned char *objRawData = [objData bytes];
  char *objPointer;
  char *strResult;

  // Get the Raw Data length and ensure we actually have data
  int intLength = (int)[objData length];
  if (intLength == 0)
    return nil;

  // Setup the String-based Result placeholder and pointer within that
  // placeholder
  strResult = (char *)calloc(((intLength + 2) / 3) * 4, sizeof(char));
  objPointer = strResult;

  // Iterate through everything
  while (intLength > 2) { // keep going until we have less than 24 bits
    *objPointer++ = _base64EncodingTable[objRawData[0] >> 2];
    *objPointer++ = _base64EncodingTable[((objRawData[0] & 0x03) << 4) +
                                         (objRawData[1] >> 4)];
    *objPointer++ = _base64EncodingTable[((objRawData[1] & 0x0f) << 2) +
                                         (objRawData[2] >> 6)];
    *objPointer++ = _base64EncodingTable[objRawData[2] & 0x3f];

    // we just handled 3 octets (24 bits) of data
    objRawData += 3;
    intLength -= 3;
  }

  // now deal with the tail end of things
  if (intLength != 0) {
    *objPointer++ = _base64EncodingTable[objRawData[0] >> 2];
    if (intLength > 1) {
      *objPointer++ = _base64EncodingTable[((objRawData[0] & 0x03) << 4) +
                                           (objRawData[1] >> 4)];
      *objPointer++ = _base64EncodingTable[(objRawData[1] & 0x0f) << 2];
      *objPointer++ = '=';
    } else {
      *objPointer++ = _base64EncodingTable[(objRawData[0] & 0x03) << 4];
      *objPointer++ = '=';
      *objPointer++ = '=';
    }
  }

  // Terminate the string-based result
  *objPointer = '\0';

  // Return the results as an NSString object
  return [NSString stringWithCString:strResult encoding:NSASCIIStringEncoding];
}

+ (NSData *)decodeBase64WithString:(NSString *)strBase64 {
  const char *objPointer =
      [strBase64 cStringUsingEncoding:NSASCIIStringEncoding];
  int intLength = (int)strlen(objPointer);
  int intCurrent;
  int i = 0, j = 0, k;

  unsigned char *objResult;
  objResult = calloc(intLength, sizeof(char));

  // Run through the whole string, converting as we go
  while (((intCurrent = *objPointer++) != '\0') && (intLength-- > 0)) {
    if (intCurrent == '=') {
      if (*objPointer != '=' && ((i % 4) == 1)) { // || (intLength > 0)) {
        // the padding character is invalid at this point -- so this entire
        // string is invalid
        free(objResult);
        return nil;
      }
      continue;
    }

    intCurrent = _base64DecodingTable[intCurrent];
    if (intCurrent == -1) {
      // we're at a whitespace -- simply skip over
      continue;
    } else if (intCurrent == -2) {
      // we're at an invalid character
      free(objResult);
      return nil;
    }

    switch (i % 4) {
    case 0:
      objResult[j] = intCurrent << 2;
      break;

    case 1:
      objResult[j++] |= intCurrent >> 4;
      objResult[j] = (intCurrent & 0x0f) << 4;
      break;

    case 2:
      objResult[j++] |= intCurrent >> 2;
      objResult[j] = (intCurrent & 0x03) << 6;
      break;

    case 3:
      objResult[j++] |= intCurrent;
      break;
    }
    i++;
  }

  // mop things up if we ended on a boundary
  k = j;
  if (intCurrent == '=') {
    switch (i % 4) {
    case 1:
      // Invalid state
      free(objResult);
      return nil;

    case 2:
      k++;
    // flow through
    case 3:
      objResult[k] = 0;
    }
  }

  // Cleanup and setup the return NSData
  NSData *objData = [[NSData alloc] initWithBytes:objResult length:j];
  free(objResult);
  return objData;
}

@end
